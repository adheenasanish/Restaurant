// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurant.Models;

namespace Restaurant.Migrations.Restaurant
{
    [DbContext(typeof(RestaurantContext))]
    partial class RestaurantContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("Restaurant.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Restaurant.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Restaurant.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Restaurant.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Restaurant.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Restaurant.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Restaurant.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Restaurant.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cartItemId");

                    b.Property<int?>("CartId")
                        .HasColumnName("cartId");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("date");

                    b.Property<int?>("ProductId")
                        .HasColumnName("productId");

                    b.Property<int?>("Qty")
                        .HasColumnName("qty");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Restaurant.Models.CategoryFoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("categoryId");

                    b.Property<int?>("TypeId")
                        .HasColumnName("typeId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeId");

                    b.ToTable("category_foodType");
                });

            modelBuilder.Entity("Restaurant.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_Id");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(75)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasMaxLength(55)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(55)
                        .IsUnicode(false);

                    b.Property<int?>("PaymentId")
                        .HasColumnName("payment_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool?>("ProfileStatus")
                        .HasColumnName("profileStatus");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(450);

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Restaurant.Models.FoodCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("categoryId");

                    b.Property<string>("CategoryName")
                        .HasColumnName("categoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("foodCategory");
                });

            modelBuilder.Entity("Restaurant.Models.FoodItem", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("food_id");

                    b.Property<int?>("FoodTypeId")
                        .HasColumnName("foodType_id");

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasMaxLength(250);

                    b.Property<string>("ItemCategory")
                        .HasColumnName("itemCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnName("unitPrice")
                        .HasColumnType("money");

                    b.HasKey("FoodId");

                    b.HasIndex("FoodTypeId");

                    b.ToTable("foodItem");
                });

            modelBuilder.Entity("Restaurant.Models.FoodType", b =>
                {
                    b.Property<int>("FoodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("foodType_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("categoryId");

                    b.Property<string>("TypeName")
                        .HasColumnName("typeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FoodTypeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("foodType");
                });

            modelBuilder.Entity("Restaurant.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_id");

                    b.Property<int?>("FoodId")
                        .HasColumnName("food_id");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.HasKey("MenuId");

                    b.HasIndex("FoodId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Restaurant.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("orderItemId");

                    b.Property<int?>("FoodId")
                        .HasColumnName("food_id");

                    b.Property<decimal?>("Hstgst")
                        .HasColumnName("hstgst")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("OrderId")
                        .HasColumnName("order_Id");

                    b.Property<decimal?>("Pst")
                        .HasColumnName("pst")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("OrderItemId");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Restaurant.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_Id");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("PayementStatus")
                        .HasColumnName("payementStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Total")
                        .HasColumnName("total")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(450);

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Restaurant.Models.Payments", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnName("paymentId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Amount")
                        .HasColumnName("amount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Cart")
                        .HasColumnName("cart")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreateTime")
                        .HasColumnName("create_time")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Currency")
                        .HasColumnName("currency")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Custom")
                        .HasColumnName("custom")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Intent")
                        .HasColumnName("intent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PayerCountryCode")
                        .HasColumnName("payerCountryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PayerEmail")
                        .HasColumnName("payerEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PayerFirstName")
                        .HasColumnName("payerFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PayerId")
                        .HasColumnName("payerID")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PayerLastName")
                        .HasColumnName("payerLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PayerMiddleName")
                        .HasColumnName("payerMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PayerStatus")
                        .HasColumnName("payerStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PaymentMethod")
                        .HasColumnName("paymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PaymentState")
                        .HasColumnName("paymentState")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Restaurant.Models.ShoppingCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cartId");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(450);

                    b.HasKey("CartId");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Restaurant.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("Restaurant.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Restaurant.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("Restaurant.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Restaurant.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("Restaurant.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Restaurant.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("Restaurant.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Restaurant.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Restaurant.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("Restaurant.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Restaurant.Models.CartItem", b =>
                {
                    b.HasOne("Restaurant.Models.ShoppingCart", "Cart")
                        .WithMany("CartItem")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK__CartItem__cartId__6CD828CA");

                    b.HasOne("Restaurant.Models.FoodItem", "Product")
                        .WithMany("CartItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__CartItem__produc__6BE40491");
                });

            modelBuilder.Entity("Restaurant.Models.CategoryFoodType", b =>
                {
                    b.HasOne("Restaurant.Models.FoodCategory", "Category")
                        .WithMany("CategoryFoodType")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__category___categ__3F115E1A");

                    b.HasOne("Restaurant.Models.FoodType", "Type")
                        .WithMany("CategoryFoodType")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK__category___typeI__40058253");
                });

            modelBuilder.Entity("Restaurant.Models.Customer", b =>
                {
                    b.HasOne("Restaurant.Models.AspNetUsers", "User")
                        .WithMany("Customer")
                        .HasForeignKey("UserId")
                        .HasConstraintName("userId");
                });

            modelBuilder.Entity("Restaurant.Models.FoodItem", b =>
                {
                    b.HasOne("Restaurant.Models.FoodType", "FoodType")
                        .WithMany("FoodItem")
                        .HasForeignKey("FoodTypeId")
                        .HasConstraintName("FK__foodItem__foodTy__3493CFA7");
                });

            modelBuilder.Entity("Restaurant.Models.FoodType", b =>
                {
                    b.HasOne("Restaurant.Models.FoodCategory", "Category")
                        .WithMany("FoodType")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__foodType__catego__3C34F16F");
                });

            modelBuilder.Entity("Restaurant.Models.Menu", b =>
                {
                    b.HasOne("Restaurant.Models.FoodItem", "Food")
                        .WithMany("Menu")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("FK__Menu__food_id__2B0A656D");
                });

            modelBuilder.Entity("Restaurant.Models.OrderDetails", b =>
                {
                    b.HasOne("Restaurant.Models.FoodItem", "Food")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("FK__OrderItem__food___2DE6D218");

                    b.HasOne("Restaurant.Models.Orders", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderItem__order__2EDAF651");
                });

            modelBuilder.Entity("Restaurant.Models.Orders", b =>
                {
                    b.HasOne("Restaurant.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Orders__customer__1DB06A4F");

                    b.HasOne("Restaurant.Models.AspNetUsers", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Orders__userId__6FB49575");
                });
#pragma warning restore 612, 618
        }
    }
}
